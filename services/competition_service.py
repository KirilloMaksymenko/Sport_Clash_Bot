"""
–°–µ—Ä–≤—ñ—Å –∑–º–∞–≥–∞–Ω—å
"""

import json
from datetime import datetime, timedelta
from typing import Optional, List
from database.database import get_db_connection
from utils.logger import setup_logger

logger = setup_logger()

class CompetitionService:
    """–°–µ—Ä–≤—ñ—Å –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑—ñ –∑–º–∞–≥–∞–Ω–Ω—è–º–∏"""

    async def create_competition(
        self, 
        group_id: Optional[int], 
        comp_type: str,
        duration_minutes: int = 60,
        route_points: Optional[List] = None
    ) -> int:
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∑–º–∞–≥–∞–Ω–Ω—è"""

        try:
            route_data = json.dumps(route_points) if route_points else ""

            async with await get_db_connection() as db:
                cursor = await db.execute("""
                    INSERT INTO competitions (group_id, comp_type, route_data, duration_minutes)
                    VALUES (?, ?, ?, ?)
                """, (group_id, comp_type, route_data, duration_minutes))

                competition_id = cursor.lastrowid
                await db.commit()

                logger.info(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ –∑–º–∞–≥–∞–Ω–Ω—è {comp_type} –∑ ID {competition_id}")
                return competition_id

        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–º–∞–≥–∞–Ω–Ω—è: {e}")
            raise

    async def join_competition(self, user_id: int, competition_id: int):
        """–ü—Ä–∏—î–¥–Ω–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ –∑–º–∞–≥–∞–Ω–Ω—è"""

        try:
            async with await get_db_connection() as db:
                # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –∑–º–∞–≥–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–µ
                cursor = await db.execute("""
                    SELECT comp_type, start_time, duration_minutes 
                    FROM competitions 
                    WHERE competition_id = ? AND is_active = 1
                """, (competition_id,))

                competition = await cursor.fetchone()

                if not competition:
                    return False

                # –õ–æ–≥—ñ–∫–∞ –ø—Ä–∏—î–¥–Ω–∞–Ω–Ω—è (–º–æ–∂–Ω–∞ —Ä–æ–∑—à–∏—Ä–∏—Ç–∏)
                logger.info(f"üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –ø—Ä–∏—î–¥–Ω–∞–≤—Å—è –¥–æ –∑–º–∞–≥–∞–Ω–Ω—è {competition_id}")
                return True

        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏—î–¥–Ω–∞–Ω–Ω—è –¥–æ –∑–º–∞–≥–∞–Ω–Ω—è: {e}")
            return False

    async def end_competition(self, competition_id: int):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∑–º–∞–≥–∞–Ω–Ω—è"""

        try:
            async with await get_db_connection() as db:
                await db.execute("""
                    UPDATE competitions 
                    SET is_active = 0 
                    WHERE competition_id = ?
                """, (competition_id,))

                await db.commit()
                logger.info(f"üèÅ –ó–º–∞–≥–∞–Ω–Ω—è {competition_id} –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∑–º–∞–≥–∞–Ω–Ω—è: {e}")
