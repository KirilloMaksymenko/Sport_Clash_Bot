"""
–û–±—Ä–æ–±–Ω–∏–∫ GPS –ª–æ–∫–∞—Ü—ñ—ó
"""

from aiogram import Router, types, F
from datetime import datetime
import math

from database.database import get_db_connection
from services.gps_service import GpsService  
from services.ranking_service import RankingService
from utils.logger import setup_logger

router = Router()
logger = setup_logger()
gps_service = GpsService()
ranking_service = RankingService()

@router.message(F.location)
async def handle_location(message: types.Message):
    """–û–±—Ä–æ–±–Ω–∏–∫ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è GPS –ª–æ–∫–∞—Ü—ñ—ó"""

    location = message.location
    user_id = message.from_user.id

    logger.info(f"üìç –û—Ç—Ä–∏–º–∞–Ω–∞ –ª–æ–∫–∞—Ü—ñ—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}: {location.latitude}, {location.longitude}")

    try:
        # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ª–æ–∫–∞—Ü—ñ—ó –≤ –ë–î
        async with await get_db_connection() as db:
            # –û—Ç—Ä–∏–º–∞–Ω–Ω—è user_id –∑ –ë–î
            cursor = await db.execute("SELECT user_id FROM users WHERE telegram_id = ?", (user_id,))
            user_row = await cursor.fetchone()

            if user_row:
                internal_user_id = user_row[0]

                # –í–∞–ª—ñ–¥–∞—Ü—ñ—è –ª–æ–∫–∞—Ü—ñ—ó
                if not gps_service.validate_location(location):
                    await message.answer("‚ùå –ù–µ—Ç–æ—á–Ω–∞ GPS –ª–æ–∫–∞—Ü—ñ—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
                    return

                # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è GPS —Ç—Ä–µ–∫—É
                speed = await gps_service.calculate_speed(internal_user_id, location)

                await db.execute("""
                    INSERT INTO gps_tracks (user_id, latitude, longitude, speed_kmh, timestamp)
                    VALUES (?, ?, ?, ?, ?)
                """, (internal_user_id, location.latitude, location.longitude, speed, datetime.now()))

                # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –ø—Ä–æ–π–¥–µ–Ω–æ—ó –≤—ñ–¥—Å—Ç–∞–Ω—ñ
                distance = await gps_service.calculate_distance_from_last_point(internal_user_id, location)

                # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–≥–∞–ª—å–Ω–æ—ó –≤—ñ–¥—Å—Ç–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞  
                if distance > 0:
                    await db.execute("""
                        UPDATE users SET total_distance = total_distance + ?, 
                                       total_steps = total_steps + ?
                        WHERE user_id = ?
                    """, (distance, int(distance * 1300), internal_user_id))  # ~1300 –∫—Ä–æ–∫—ñ–≤ –Ω–∞ –∫–º

                    # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–µ–π—Ç–∏–Ω–≥—É
                    await ranking_service.update_user_points(internal_user_id, distance)

                await db.commit()

                # –í—ñ–¥–ø–æ–≤—ñ–¥—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
                response_text = f"""
üìç **–õ–æ–∫–∞—Ü—ñ—è –∑–±–µ—Ä–µ–∂–µ–Ω–∞!**

üó∫Ô∏è –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏: `{location.latitude:.6f}, {location.longitude:.6f}`
üö∂‚Äç‚ôÇÔ∏è –í—ñ–¥—Å—Ç–∞–Ω—å –∑ –æ—Å—Ç–∞–Ω–Ω—å–æ—ó —Ç–æ—á–∫–∏: {distance:.2f} –∫–º
üèÉ‚Äç‚ôÇÔ∏è –®–≤–∏–¥–∫—ñ—Å—Ç—å: {speed:.1f} –∫–º/–≥–æ–¥
üìä –ë–∞–ª–∏ –Ω–∞—Ä–∞—Ö–æ–≤–∞–Ω—ñ –∑–∞ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å!

*–ü—Ä–æ–¥–æ–≤–∂—É–π —Ä—É—Ö–∞—Ç–∏—Å—å –¥–ª—è –∑–±—ñ–ª—å—à–µ–Ω–Ω—è —Ä–µ–π—Ç–∏–Ω–≥—É* üí™
                """

                await message.answer(response_text, parse_mode="Markdown")

        logger.info(f"‚úÖ –õ–æ–∫–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id} –∑–±–µ—Ä–µ–∂–µ–Ω–∞, –≤—ñ–¥—Å—Ç–∞–Ω—å: {distance:.2f} –∫–º")

    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –ª–æ–∫–∞—Ü—ñ—ó: {e}")
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –ª–æ–∫–∞—Ü—ñ—ó. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

@router.message(F.text == "üìç –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –ª–æ–∫–∞—Ü—ñ—î—é") 
async def request_location(message: types.Message):
    """–ó–∞–ø–∏—Ç –ª–æ–∫–∞—Ü—ñ—ó –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    await message.answer(
        "üìç –ü–æ–¥—ñ–ª—ñ—Ç—å—Å—è —Å–≤–æ—î—é –ª–æ–∫–∞—Ü—ñ—î—é –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ",
        reply_markup=types.ReplyKeyboardMarkup(
            keyboard=[[types.KeyboardButton(text="üìç –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –ª–æ–∫–∞—Ü—ñ—é", request_location=True)]],
            resize_keyboard=True,
            one_time_keyboard=True
        )
    )
