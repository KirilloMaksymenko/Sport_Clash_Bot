"""
–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start
"""

from aiogram import Router, types, F
from aiogram.filters import CommandStart
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup, WebAppInfo

from config import config
from database.database import get_db_connection
from utils.logger import setup_logger

router = Router()
logger = setup_logger()

@router.message(CommandStart())
async def cmd_start(message: types.Message):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start"""

    user = message.from_user
    logger.info(f"üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user.username} ({user.id}) –∑–∞–ø—É—Å—Ç–∏–≤ –±–æ—Ç–∞")

    # –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –ë–î
    try:
        async with await get_db_connection() as db:
            await db.execute("""
                INSERT OR IGNORE INTO users (telegram_id, username, first_name)
                VALUES (?, ?, ?)
            """, (user.id, user.username, user.first_name))
            await db.commit()
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {e}")

    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [
                KeyboardButton(text="üèÉ –í—ñ–¥–∫—Ä–∏—Ç–∏ Fitness App", 
                              web_app=WebAppInfo(url=config.MINI_APP_URL))
            ],
            [
                KeyboardButton(text="üìä –ú—ñ–π —Ä–µ–π—Ç–∏–Ω–≥"),
                KeyboardButton(text="üèÜ –¢–æ–ø –≥—Ä–∞–≤—Ü—ñ–≤")
            ],
            [
                KeyboardButton(text="üìç –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –ª–æ–∫–∞—Ü—ñ—î—é", 
                              request_location=True)
            ]
        ],
        resize_keyboard=True,
        input_field_placeholder="–í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é..."
    )

    welcome_text = f"""
üèÉ‚Äç‚ôÇÔ∏è **–í—ñ—Ç–∞—é –≤ Fitness Competition Bot!**

–ü—Ä–∏–≤—ñ—Ç, {user.first_name}! üëã

–¶–µ–π –±–æ—Ç –¥–æ–ø–æ–º–æ–∂–µ —Ç–æ–±—ñ:
üîπ –í—ñ–¥—Å—Ç–µ–∂—É–≤–∞—Ç–∏ —â–æ–¥–µ–Ω–Ω—É –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å
üîπ –ë—Ä–∞—Ç–∏ —É—á–∞—Å—Ç—å —É –∑–º–∞–≥–∞–Ω–Ω—è—Ö –∑ –¥—Ä—É–∑—è–º–∏  
üîπ –ó–∞—Ä–æ–±–ª—è—Ç–∏ –±–∞–ª–∏ —Ç–∞ –ø—ñ–¥–≤–∏—â—É–≤–∞—Ç–∏ —Ä–µ–π—Ç–∏–Ω–≥
üîπ –ó–º–∞–≥–∞—Ç–∏—Å—è –≤ Sprint —Ç–∞ Endurance –∑–∞–±—ñ–≥–∞—Ö

**–¢–≤—ñ–π –ø–æ—Ç–æ—á–Ω–∏–π —Ä—ñ–≤–µ–Ω—å:** ü•â –ë—Ä–æ–Ω–∑–∞

üì± –ù–∞—Ç–∏—Å–Ω–∏ "–í—ñ–¥–∫—Ä–∏—Ç–∏ Fitness App" –¥–ª—è –ø–æ–≤–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—É!
    """

    await message.answer(welcome_text, reply_markup=keyboard, parse_mode="Markdown")

@router.message(F.text == "üìä –ú—ñ–π —Ä–µ–π—Ç–∏–Ω–≥")
async def my_ranking(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ —Ä–µ–π—Ç–∏–Ω–≥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    user_id = message.from_user.id

    try:
        async with await get_db_connection() as db:
            cursor = await db.execute("""
                SELECT u.total_distance, u.total_steps, r.points, r.rank_level
                FROM users u
                LEFT JOIN rankings r ON u.user_id = r.user_id
                WHERE u.telegram_id = ?
            """, (user_id,))
            user_data = await cursor.fetchone()

            if user_data:
                distance, steps, points, rank = user_data
                rank_emoji = {"bronze": "ü•â", "silver": "ü•à", "gold": "ü•á", "platinum": "üíé", "diamond": "üëë"}.get(rank, "ü•â")

                ranking_text = f"""
üìä **–¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**

üó∫Ô∏è –ó–∞–≥–∞–ª—å–Ω–∞ –≤—ñ–¥—Å—Ç–∞–Ω—å: {distance or 0:.1f} –∫–º
üëü –ó–∞–≥–∞–ª—å–Ω—ñ –∫—Ä–æ–∫–∏: {steps or 0:,}
‚≠ê –û—á–∫–∏: {points or 0}
{rank_emoji} –†—ñ–≤–µ–Ω—å: {rank or 'bronze'}

–ü—Ä–æ–¥–æ–≤–∂—É–π —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –¥–ª—è –ø—ñ–¥–≤–∏—â–µ–Ω–Ω—è —Ä–µ–π—Ç–∏–Ω–≥—É! üí™
                """
            else:
                ranking_text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —â–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ—á–Ω–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –±–æ—Ç–∞!"

        await message.answer(ranking_text, parse_mode="Markdown")

    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–µ–π—Ç–∏–Ω–≥—É: {e}")
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

@router.message(F.text == "üèÜ –¢–æ–ø –≥—Ä–∞–≤—Ü—ñ–≤")  
async def top_players(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ —Ç–æ–ø –≥—Ä–∞–≤—Ü—ñ–≤"""
    try:
        async with await get_db_connection() as db:
            cursor = await db.execute("""
                SELECT u.first_name, r.points, r.rank_level
                FROM users u
                JOIN rankings r ON u.user_id = r.user_id
                ORDER BY r.points DESC
                LIMIT 10
            """, )
            top_users = await cursor.fetchall()

            if top_users:
                leaderboard_text = "üèÜ **–¢–æ–ø 10 –≥—Ä–∞–≤—Ü—ñ–≤:**\n\n"
                rank_emojis = {"bronze": "ü•â", "silver": "ü•à", "gold": "ü•á", "platinum": "üíé", "diamond": "üëë"}

                for i, (name, points, rank_level) in enumerate(top_users, 1):
                    emoji = rank_emojis.get(rank_level, "ü•â")
                    leaderboard_text += f"{i}. {emoji} {name} - {points} –æ—á–æ–∫\n"
            else:
                leaderboard_text = "üèÜ –†–µ–π—Ç–∏–Ω–≥ –ø–æ–∫–∏ —â–æ –ø–æ—Ä–æ–∂–Ω—ñ–π. –ë—É–¥—å –ø–µ—Ä—à–∏–º!"

        await message.answer(leaderboard_text, parse_mode="Markdown")

    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–ø—É: {e}")
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–µ–π—Ç–∏–Ω–≥—É")
