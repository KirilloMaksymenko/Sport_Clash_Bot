"""
–û–±—Ä–æ–±–Ω–∏–∫ –∑–º–∞–≥–∞–Ω—å
"""

from aiogram import Router, types, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from datetime import datetime, timedelta

from database.database import get_db_connection
from services.competition_service import CompetitionService
from utils.logger import setup_logger

router = Router()
logger = setup_logger()
competition_service = CompetitionService()

@router.callback_query(F.data.startswith("competition_"))
async def handle_competition_callback(callback: types.CallbackQuery):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–ª–±–µ–∫—ñ–≤ –∑–º–∞–≥–∞–Ω—å"""

    action = callback.data.split("_")[1]
    user_id = callback.from_user.id

    if action == "sprint":
        await start_sprint_competition(callback, user_id)
    elif action == "endurance":
        await start_endurance_competition(callback, user_id)
    elif action == "join":
        comp_id = callback.data.split("_")[2]
        await join_competition(callback, user_id, comp_id)

    await callback.answer()

async def start_sprint_competition(callback: types.CallbackQuery, user_id: int):
    """–ó–∞–ø—É—Å–∫ Sprint –∑–º–∞–≥–∞–Ω–Ω—è"""
    try:
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–º–∞–≥–∞–Ω–Ω—è –≤ –ë–î
        competition_id = await competition_service.create_competition(
            group_id=None,
            comp_type="sprint",
            duration_minutes=30
        )

        text = f"""
‚ö° **Sprint –∑–º–∞–≥–∞–Ω–Ω—è –∑–∞–ø—É—â–µ–Ω–æ!**

üèÉ‚Äç‚ôÇÔ∏è –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: 30 —Ö–≤–∏–ª–∏–Ω
üéØ –ú–µ—Ç–∞: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ —à–≤–∏–¥–∫—ñ—Å—Ç—å
üìç –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ Mini App –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è

–£–¥–∞—á—ñ! üöÄ
        """

        await callback.message.edit_text(text, parse_mode="Markdown")

    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É Sprint –∑–º–∞–≥–∞–Ω–Ω—è: {e}")
        await callback.message.edit_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É –∑–º–∞–≥–∞–Ω–Ω—è")

async def start_endurance_competition(callback: types.CallbackQuery, user_id: int):
    """–ó–∞–ø—É—Å–∫ Endurance –∑–º–∞–≥–∞–Ω–Ω—è"""
    try:
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–º–∞–≥–∞–Ω–Ω—è –≤ –ë–î
        competition_id = await competition_service.create_competition(
            group_id=None,
            comp_type="endurance", 
            duration_minutes=90
        )

        text = f"""
üèÉ‚Äç‚ôÇÔ∏è **Endurance –∑–º–∞–≥–∞–Ω–Ω—è –∑–∞–ø—É—â–µ–Ω–æ!**

‚è±Ô∏è –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: 90 —Ö–≤–∏–ª–∏–Ω
üéØ –ú–µ—Ç–∞: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –≤—ñ–¥—Å—Ç–∞–Ω—å
üìç –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ Mini App –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è

–£–¥–∞—á—ñ! üí™
        """

        await callback.message.edit_text(text, parse_mode="Markdown")

    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É Endurance –∑–º–∞–≥–∞–Ω–Ω—è: {e}")
        await callback.message.edit_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É –∑–º–∞–≥–∞–Ω–Ω—è")
