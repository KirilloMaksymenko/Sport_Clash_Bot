"""
–ö–æ—Ä–∏—Å–Ω—ñ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∏
"""

import functools
import asyncio
from utils.logger import setup_logger

logger = setup_logger()

def async_retry(max_attempts: int = 3, delay: float = 1.0):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø–æ–≤—Ç–æ—Ä—É –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π"""

    def decorator(func):
        @functools.wraps(func)
        async def wrapper(*args, **kwargs):
            for attempt in range(max_attempts):
                try:
                    return await func(*args, **kwargs)
                except Exception as e:
                    if attempt == max_attempts - 1:
                        logger.error(f"‚ùå –§—É–Ω–∫—Ü—ñ—è {func.__name__} –Ω–µ –≤–∏–∫–æ–Ω–∞–ª–∞—Å—å –ø—ñ—Å–ª—è {max_attempts} —Å–ø—Ä–æ–±: {e}")
                        raise

                    logger.warning(f"‚ö†Ô∏è –°–ø—Ä–æ–±–∞ {attempt + 1} —Ñ—É–Ω–∫—Ü—ñ—ó {func.__name__} –Ω–µ –≤–¥–∞–ª–∞—Å—å: {e}")
                    await asyncio.sleep(delay)

        return wrapper
    return decorator

def log_execution(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ–π"""

    @functools.wraps(func)
    async def wrapper(*args, **kwargs):
        logger.info(f"üöÄ –í–∏–∫–æ–Ω–∞–Ω–Ω—è {func.__name__}")
        try:
            result = await func(*args, **kwargs)
            logger.info(f"‚úÖ {func.__name__} –≤–∏–∫–æ–Ω–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ")
            return result
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ {func.__name__}: {e}")
            raise

    return wrapper
