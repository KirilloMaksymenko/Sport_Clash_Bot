// Leaflet –∫–∞—Ä—Ç–∞ –¥–ª—è Fitness Competition Mini App

class FitnessMap {
    constructor() {
        this.map = null;
        this.userMarker = null;
        this.routePolyline = null;
        this.userLocation = null;
        this.routePoints = [];
        this.totalDistance = 0;

        this.init();
    }

    init() {
        // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–∞—Ä—Ç–∏ –ø—ñ—Å–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è DOM
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', () => {
                this.initializeMap();
            });
        } else {
            this.initializeMap();
        }
    }

    initializeMap() {
        const mapElement = document.getElementById('leaflet-map');
        if (!mapElement) {
            console.error('Map element not found');
            return;
        }

        // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –µ–∫–∑–µ–º–ø–ª—è—Ä—É –∫–∞—Ä—Ç–∏
        this.map = L.map('leaflet-map', {
            zoomControl: true,
            attributionControl: false
        }).setView([50.4501, 30.5234], 13); // –ö–∏—ó–≤ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º

        // –î–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–∞–π–ª–æ–≤–æ–≥–æ —à–∞—Ä—É OpenStreetMap
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '¬© OpenStreetMap contributors',
            maxZoom: 19
        }).addTo(this.map);

        // –°–ø—Ä–æ–±–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω—É –ª–æ–∫–∞—Ü—ñ—é
        this.getCurrentLocation();

        // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –ø–æ–¥—ñ–π
        this.setupMapEvents();

        // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
        window.mapInstance = this.map;
        window.updateMapLocation = (lat, lng) => this.updateUserLocation(lat, lng);

        console.log('üó∫Ô∏è –ö–∞—Ä—Ç–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞');
    }

    getCurrentLocation() {
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(
                (position) => {
                    const { latitude, longitude } = position.coords;
                    this.updateUserLocation(latitude, longitude);
                    this.map.setView([latitude, longitude], 16);
                },
                (error) => {
                    console.warn('–ì–µ–æ–ª–æ–∫–∞—Ü—ñ—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞:', error.message);
                    // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ö–∏—ó–≤ —è–∫ fallback
                    this.updateUserLocation(50.4501, 30.5234);
                }
            );
        }
    }

    updateUserLocation(lat, lng) {
        this.userLocation = [lat, lng];

        // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –º–∞—Ä–∫–µ—Ä–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        if (this.userMarker) {
            this.userMarker.setLatLng([lat, lng]);
        } else {
            // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –º–∞—Ä–∫–µ—Ä–∞
            this.userMarker = L.marker([lat, lng], {
                icon: this.createUserIcon()
            }).addTo(this.map);

            this.userMarker.bindPopup('üìç –í–∞—à–∞ –ø–æ–∑–∏—Ü—ñ—è').openPopup();
        }

        // –î–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ—á–∫–∏ –¥–æ –º–∞—Ä—à—Ä—É—Ç—É
        this.addRoutePoint(lat, lng);

        // –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        this.updateDistanceStats();
    }

    createUserIcon() {
        return L.icon({
            iconUrl: 'data:image/svg+xml;base64,' + btoa(`
                <svg width="32" height="32" xmlns="http://www.w3.org/2000/svg">
                    <circle cx="16" cy="16" r="8" fill="#0088cc" stroke="#ffffff" stroke-width="2"/>
                    <circle cx="16" cy="16" r="4" fill="#ffffff"/>
                </svg>
            `),
            iconSize: [32, 32],
            iconAnchor: [16, 16],
            popupAnchor: [0, -16]
        });
    }

    addRoutePoint(lat, lng) {
        const newPoint = [lat, lng];
        this.routePoints.push(newPoint);

        // –û–±–º–µ–∂–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Ç–æ—á–æ–∫ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
        if (this.routePoints.length > 100) {
            this.routePoints = this.routePoints.slice(-50);
        }

        this.updateRoutePolyline();
    }

    updateRoutePolyline() {
        if (this.routePoints.length < 2) return;

        // –í–∏–¥–∞–ª–µ–Ω–Ω—è —Å—Ç–∞—Ä–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç—É
        if (this.routePolyline) {
            this.map.removeLayer(this.routePolyline);
        }

        // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç—É
        this.routePolyline = L.polyline(this.routePoints, {
            color: '#ff6b35',
            weight: 4,
            opacity: 0.8,
            smoothFactor: 1
        }).addTo(this.map);
    }

    calculateDistance(point1, point2) {
        // –§–æ—Ä–º—É–ª–∞ –≥–∞–≤–µ—Ä—Å–∏–Ω—É—Å–∞ –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –≤—ñ–¥—Å—Ç–∞–Ω—ñ –º—ñ–∂ –¥–≤–æ–º–∞ —Ç–æ—á–∫–∞–º–∏
        const R = 6371; // –†–∞–¥—ñ—É—Å –ó–µ–º–ª—ñ –≤ –∫–º
        const dLat = this.toRadians(point2[0] - point1[0]);
        const dLon = this.toRadians(point2[1] - point1[1]);

        const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +
                Math.cos(this.toRadians(point1[0])) * Math.cos(this.toRadians(point2[0])) *
                Math.sin(dLon / 2) * Math.sin(dLon / 2);

        const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
        return R * c; // –í—ñ–¥—Å—Ç–∞–Ω—å –≤ –∫–º
    }

    toRadians(degrees) {
        return degrees * (Math.PI / 180);
    }

    updateDistanceStats() {
        if (this.routePoints.length < 2) return;

        // –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∑–∞–≥–∞–ª—å–Ω–æ—ó –≤—ñ–¥—Å—Ç–∞–Ω—ñ
        let totalDistance = 0;
        for (let i = 1; i < this.routePoints.length; i++) {
            totalDistance += this.calculateDistance(
                this.routePoints[i - 1], 
                this.routePoints[i]
            );
        }

        this.totalDistance = totalDistance;

        // –û–Ω–æ–≤–ª–µ–Ω–Ω—è UI
        const sessionDistanceElement = document.getElementById('session-distance');
        if (sessionDistanceElement) {
            sessionDistanceElement.textContent = `${totalDistance.toFixed(2)} –∫–º`;
        }
    }

    setupMapEvents() {
        // –û–±—Ä–æ–±–Ω–∏–∫ –∫–ª—ñ–∫—É –ø–æ –∫–∞—Ä—Ç—ñ
        this.map.on('click', (e) => {
            const { lat, lng } = e.latlng;
            console.log(`–ö–ª—ñ–∫ –ø–æ –∫–∞—Ä—Ç—ñ: ${lat.toFixed(6)}, ${lng.toFixed(6)}`);
        });

        // –û–±—Ä–æ–±–Ω–∏–∫ –∑–º—ñ–Ω–∏ –º–∞—Å—à—Ç–∞–±—É
        this.map.on('zoomend', () => {
            console.log(`–ú–∞—Å—à—Ç–∞–± –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞: ${this.map.getZoom()}`);
        });
    }

    clearRoute() {
        this.routePoints = [];
        this.totalDistance = 0;

        if (this.routePolyline) {
            this.map.removeLayer(this.routePolyline);
            this.routePolyline = null;
        }

        // –û–Ω–æ–≤–ª–µ–Ω–Ω—è UI
        const sessionDistanceElement = document.getElementById('session-distance');
        if (sessionDistanceElement) {
            sessionDistanceElement.textContent = '0 –∫–º';
        }
    }

    centerOnUser() {
        if (this.userLocation) {
            this.map.setView(this.userLocation, 16);
        }
    }
}

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–∞—Ä—Ç–∏
window.fitnessMap = new FitnessMap();